{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\new project\\\\new\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [mode, setmode] = useState('light');\n  const [alert, setalert] = useState('null');\n  const showalert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type\n    });\n    setTimeout(() => {\n      setalert(null);\n    }, 700);\n  };\n  const togglemode = () => {\n    if (mode === 'light') {\n      setmode('dark');\n      document.body.style.backgroundColor = 'black';\n      document.body.style.color = 'white';\n      showalert(\" Dark mode has been enabled\", \"success\");\n    } else {\n      setmode('light');\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = '#212529';\n      showalert(\" Light mode has been enabled\", \"success\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {\n      mode: mode,\n      togglemode: togglemode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Alert, {\n      alert: alert\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-3\",\n      children: /*#__PURE__*/_jsxDEV(TextForm, {\n        showalert: showalert,\n        heading: \"Enter your text to analyze:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 1\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 1\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"yX8yZNavzdgwEvLVRQAYVS7+AcY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","About","Navbar","TextForm","Alert","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","mode","setmode","alert","setalert","showalert","message","type","msg","setTimeout","togglemode","document","body","style","backgroundColor","color","children","fileName","_jsxFileName","lineNumber","columnNumber","className","heading","_c","$RefreshReg$"],"sources":["C:/Users/lenovo/Desktop/new project/new/src/App.js"],"sourcesContent":["import React, { useState } from 'react'\nimport './App.css';\nimport About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nfunction App() {\n  const [mode,setmode]=useState('light');\n  const [alert,setalert]=useState('null');\n\n  const showalert=(message,type)=>{\n    setalert({\n      msg:message,\n      type:type\n    })\n    setTimeout(()=>{\n      setalert(null);\n    },700);\n  }\n\n  const togglemode=()=>{\n    if(mode=== 'light'){\n      setmode('dark')\n      document.body.style.backgroundColor='black';\n      document.body.style.color='white';\n      showalert(\" Dark mode has been enabled\",\"success\");\n    }\n    else{\n      setmode('light')\n      document.body.style.backgroundColor='white';\n      document.body.style.color='#212529';\n      showalert(\" Light mode has been enabled\",\"success\");\n    }\n  }\n  return (\n    <>\n    \n<Navbar mode={mode} togglemode={togglemode}/>\n<Alert alert={alert}/>\n<div className=\"container my-3\">\n<TextForm showalert={showalert} heading=\"Enter your text to analyze:\"/>\n{/* <About/> */}\n</div>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAClB,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,KAAK,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AACvC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAACZ,QAAQ,CAAC,OAAO,CAAC;EACtC,MAAM,CAACa,KAAK,EAACC,QAAQ,CAAC,GAACd,QAAQ,CAAC,MAAM,CAAC;EAEvC,MAAMe,SAAS,GAACA,CAACC,OAAO,EAACC,IAAI,KAAG;IAC9BH,QAAQ,CAAC;MACPI,GAAG,EAACF,OAAO;MACXC,IAAI,EAACA;IACP,CAAC,CAAC;IACFE,UAAU,CAAC,MAAI;MACbL,QAAQ,CAAC,IAAI,CAAC;IAChB,CAAC,EAAC,GAAG,CAAC;EACR,CAAC;EAED,MAAMM,UAAU,GAACA,CAAA,KAAI;IACnB,IAAGT,IAAI,KAAI,OAAO,EAAC;MACjBC,OAAO,CAAC,MAAM,CAAC;MACfS,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAC,OAAO;MAC3CH,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACE,KAAK,GAAC,OAAO;MACjCV,SAAS,CAAC,6BAA6B,EAAC,SAAS,CAAC;IACpD,CAAC,MACG;MACFH,OAAO,CAAC,OAAO,CAAC;MAChBS,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACC,eAAe,GAAC,OAAO;MAC3CH,QAAQ,CAACC,IAAI,CAACC,KAAK,CAACE,KAAK,GAAC,SAAS;MACnCV,SAAS,CAAC,8BAA8B,EAAC,SAAS,CAAC;IACrD;EACF,CAAC;EACD,oBACET,OAAA,CAAAE,SAAA;IAAAkB,QAAA,gBAEJpB,OAAA,CAACJ,MAAM;MAACS,IAAI,EAAEA,IAAK;MAACS,UAAU,EAAEA;IAAW;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,eAC7CxB,OAAA,CAACF,KAAK;MAACS,KAAK,EAAEA;IAAM;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAE,eACtBxB,OAAA;MAAKyB,SAAS,EAAC,gBAAgB;MAAAL,QAAA,eAC/BpB,OAAA,CAACH,QAAQ;QAACY,SAAS,EAAEA,SAAU;QAACiB,OAAO,EAAC;MAA6B;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAE;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAEjE;EAAA,gBACC;AAEP;AAACpB,EAAA,CAvCQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAyCZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}