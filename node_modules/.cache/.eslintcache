[{"C:\\Users\\lenovo\\Desktop\\new project\\new\\src\\index.js":"1","C:\\Users\\lenovo\\Desktop\\new project\\new\\src\\App.js":"2","C:\\Users\\lenovo\\Desktop\\new project\\new\\src\\reportWebVitals.js":"3","C:\\Users\\lenovo\\Desktop\\new project\\new\\src\\components\\Navbar.js":"4","C:\\Users\\lenovo\\Desktop\\new project\\new\\src\\components\\TextForm.js":"5","C:\\Users\\lenovo\\Desktop\\new project\\new\\src\\components\\About.js":"6","C:\\Users\\lenovo\\Desktop\\new project\\new\\src\\components\\Alert.js":"7"},{"size":535,"mtime":1679489939552,"results":"8","hashOfConfig":"9"},{"size":1168,"mtime":1681490884935,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1679489939773,"results":"11","hashOfConfig":"9"},{"size":1580,"mtime":1681491285801,"results":"12","hashOfConfig":"9"},{"size":2245,"mtime":1681491135481,"results":"13","hashOfConfig":"9"},{"size":4728,"mtime":1680877164775,"results":"14","hashOfConfig":"9"},{"size":308,"mtime":1681375251794,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"13n5qmg",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"19"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"C:\\Users\\lenovo\\Desktop\\new project\\new\\src\\index.js",[],[],[],"C:\\Users\\lenovo\\Desktop\\new project\\new\\src\\App.js",[],[],"C:\\Users\\lenovo\\Desktop\\new project\\new\\src\\reportWebVitals.js",[],[],"C:\\Users\\lenovo\\Desktop\\new project\\new\\src\\components\\Navbar.js",[],[],"C:\\Users\\lenovo\\Desktop\\new project\\new\\src\\components\\TextForm.js",["40","41","42"],[],"import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        let newText=setText(text.toUpperCase(text));\r\n        props.showalert(\":Converted to Uppercase\",\"success\");\r\n    }\r\n    const handleDownClick = ()=>{\r\n        let newText=setText(text.toLowerCase(text));\r\n        props.showalert(\":Converted to Lowercase\",\"success\");\r\n    }\r\n    const handleclearClick = ()=>{\r\n        let newText=setText('');\r\n        props.showalert(\":Cleared Text\",\"success\");\r\n    }\r\n    const handlecopy =()=>{\r\n        var text=document.getElementById(\"mybox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.showalert(\":Copied Text\",\"success\");\r\n    }\r\n    const handleextraspaces = ()=>{\r\n        let newText=text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n        props.showalert(\":Removed Extra Spaces\",\"success\");\r\n    }\r\n    const handleOnChange = (event)=>{\r\n        setText(event.target.value);\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n        <div className='container'>\r\n            <h3>{props.heading}</h3>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"mybox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleDownClick}>Convert to Lowercase</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleclearClick}>Clear text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handlecopy}>Copy text</button>\r\n            <button className=\"btn btn-primary mx-2\" onClick={handleextraspaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-4\">\r\n        <h3>Your text summary</h3>\r\n        <p>{text.split(\" \").length -1} words and {text.length} characters</p>\r\n        <p>{0.008 * text.split(\" \").length}mins read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter Some Text in The above area to Preview it here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\lenovo\\Desktop\\new project\\new\\src\\components\\About.js",["43"],[],"import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    const [mystyle,setmystyle]= useState( {\r\n        color:'black',\r\n        backgroundColor:'white',\r\n    })\r\n\r\n    const [btntext,setbtntext]= useState(\"Enable Dark Mode\")\r\n    const toggleStyle = ()=>{\r\n        if(mystyle.color=='white'){\r\n            setmystyle({\r\n                color:'black',\r\n                backgroundColor:'white'\r\n            })\r\n            setbtntext(\"Enable Dark Mode\")\r\n        }\r\n        else{\r\n            setmystyle({\r\n                color:'white',\r\n                backgroundColor:'black',\r\n                border:'1px solid white'\r\n            })\r\n            setbtntext(\"Enable Light Mode\")\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='container'style={mystyle} >\r\n            <div className=\"accordion\" id=\"accordionExample\">\r\n            <h1 className=\"my-2\">About Us</h1>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={mystyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={mystyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\">\r\n                        <button className=\"accordion-button collapsed\" style={mystyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={mystyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button type=\"button\" onClick={toggleStyle} className=\"btn btn-primary my-3\">{btntext}</button>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\lenovo\\Desktop\\new project\\new\\src\\components\\Alert.js",[],[],{"ruleId":"44","severity":1,"message":"45","line":6,"column":13,"nodeType":"46","messageId":"47","endLine":6,"endColumn":20},{"ruleId":"44","severity":1,"message":"45","line":10,"column":13,"nodeType":"46","messageId":"47","endLine":10,"endColumn":20},{"ruleId":"44","severity":1,"message":"45","line":14,"column":13,"nodeType":"46","messageId":"47","endLine":14,"endColumn":20},{"ruleId":"48","severity":1,"message":"49","line":11,"column":25,"nodeType":"50","messageId":"51","endLine":11,"endColumn":27},"no-unused-vars","'newText' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]